## functions

# 等待 agent 回覆完畢
def wait_for_submit_button(driver, timeout=3600):
    submit_button_locator = (By.ID, 'sendbtn')
    WebDriverWait(driver, timeout).until(EC.element_to_be_clickable(submit_button_locator))

# 對話
def talk(user_input, submit_button, user_input_element):
    user_input_element.send_keys(user_input)
    submit_button.click()
    wait_for_submit_button(driver)
    submit_button = driver.find_element_by_css_selector('#sendbtn')
    submit_button.click()

# 儲存對話內容
def store_talk_response(class_name):
    agent_elements = driver.find_elements_by_class_name(class_name)
    if agent_elements:
        last_agent_element = agent_elements[-1]
        robot_response = last_agent_element.text
        return robot_response
        #print("機器人的回覆:", robot_response)
    else:
        #print(f"未找到 class 为 '{class_name}' 的元素")
        return "Not found!"


## 讀取辯論主題
import pandas as pd

# CSV 文件的 URL
csv_url_1 = "https://raw.githubusercontent.com/ariapoy/html.2023.bonusfinal-public/main/subjects-public.csv"
csv_url_2 = "https://raw.githubusercontent.com/ariapoy/html.2023.bonusfinal-public/main/subjects-private.csv"

# 讀取兩個 CSV 文件
df1 = pd.read_csv(csv_url_1)
df2 = pd.read_csv(csv_url_2)

# 合併兩個 DataFrame
df = pd.concat([df1, df2], ignore_index=True)


## 開始 chatUI
from selenium import webdriver
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import Select
import warnings
import shutil
import os
import time
import re
import csv

warnings.filterwarnings("ignore")

for i in range(len(df)):  # run all subject
    
    # set config
    name = df_test["name"][i]
    subject_i = df_test["subject"][i]
    k = 3 # round of debate
    start_time = time.time()
    print(f"This is round {i} with subject {name}:{subject_i}")


    # open driver
    driver = webdriver.Chrome(ChromeDriverManager().install())

    
    # login
    url = 'http://140.112.90.203:6271/login'
    driver.get(url)
    team_name_input = driver.find_element("name", "teamname")
    password_input = driver.find_element("name", "passwd")
    team_name_input.send_keys("tn") 
    password_input.send_keys("pwd")  
    password_input.send_keys(Keys.RETURN)

    
    # go to chatUI
    link_element = driver.find_element("link text", "Chat UI")
    link_element.click()

    
    # submit config
    config_data = f"""
    {{
       "subject": "{subject_i}",
       "Agent-A": {{
           "model": "gpt-3.5-turbo-16k",
           "frequency_penalty": 0.3,
           "n": 1,
           "presence_penalty": 2,
           "top_p": 0.1
       }},
       "Agent-B": {{
           "model": "gpt-3.5-turbo-16k",
           "frequency_penalty": 0.3,
           "n": 1,
           "presence_penalty": 2,
           "top_p": 0.1
       }}
    }}
    """
    textarea = driver.find_element_by_id('llm_config')
    textarea.send_keys(config_data)
    form = driver.find_element_by_tag_name('form')
    form.submit()


    ######## setTimeout
    
    change_time_out_function = """
    var originalSetTimeout = window.setTimeout;
    window.setTimeout = function(callback, time) {
        if (callback.toString().indexOf('displayNextLetter') == 1|| callback.toString().includes('temp.innerHTML')) {
            time = 1; 
        }
        return originalSetTimeout(callback, time);
    };
    """
    ## 执行JavaScript代码
    driver.execute_script(change_time_out_function)

    # Committee Initialization
    select_element = driver.find_element_by_id('action')
    select = Select(select_element)
    user_input_element = driver.find_element_by_id('userinput')
    submit_button = driver.find_element_by_id('sendbtn')


    # Committee Initialization for A
    a1 = """I’m organizing a committee to engage in debates on various subjects. 
    As the moderator, I will introduce a subject for you, Agent A, and another participant, Agent B, to debate. 
    Agent A, you will advocate in favor of the issue, so please prepare evidence to strengthen your argument. 
    On a scale from 0 to 1, where 0 denotes complete agreement and 1 indicates a devil’s advocate stance, your argument strength is rated at 0.9.
    And in following chat, please never use more than 300 words to reply, thaks.""" 
    a2 = f"""Agent-A, we are in the process of selecting a suitable subject for debate. 
    What do you think of {subject_i} as a balanced subject for our debate contest?"""    
    a3 = """Agent-A, could you please suggest various ten topics or themes for the above debate subject?
    Print the ten topics with item list."""

    
    # chat with A
    select.select_by_visible_text("Agent-A")    
    talk(a1, submit_button, user_input_element)
    talk(a2, submit_button, user_input_element)
    talk(a3, submit_button, user_input_element)    
    robot_response_A = store_talk_response('agentAmessage')


    # Committee Initialization for B
    b1 = """I’m organizing a committee to engage in debates on various subjects. 
    As the moderator, I will introduce a subject for you, Agent B, and another participant, Agent A, to debate. 
    Agent B, you will oppose in favor of the issue, so please prepare evidence to strengthen your argument. 
    On a scale from 0 to 1, where 0 denotes complete agreement and 1 indicates a devil’s advocate stance, your argument strength is rated at 0.9.
    And in following chat, please never use more than 300 words to reply, thaks."""
    b2 = f"""Agent-B, we are in the process of selecting a suitable subject for debate. 
    What do you think of {subject_i} as a balanced subject for our debate contest?"""
    b3 = """Agent-B, could you please suggest various ten topics or themes for the above debate subject?
    Print the ten topics with item list."""


    # chat with B
    select.select_by_visible_text("Agent-B")
    talk(b1, submit_button, user_input_element)
    talk(b2, submit_button, user_input_element)
    talk(b3, submit_button, user_input_element)
    robot_response_B = store_talk_response('agentBmessage')


    # A B chat
    a_inter_static_front = []
    a_inter_static_end = []
    b_inter_static_front = []
    b_inter_static_end = []
    
    a_inter_static_front.append("Agent-A, you and Agent-B proposed ten topics:")
    a_inter_static_end.append("Please review the lists and reduce the topics to five.")
    b_inter_static_front.append("Agent-B, you and Agent-A proposed ten topics:")
    b_inter_static_end.append("Please review the lists and reduce the topics to five.")

    
    a_inter_static_front.append("Agent-A, you and Agent-B reduced the topics to five:")
    a_inter_static_end.append("Please identify and refine the list of five to be somehow overlapping.")
    b_inter_static_front.append("Agent-B, you and Agent-A reduced the topics to five:")
    b_inter_static_end.append("Please identify and refine the list of five to be somehow overlapping.")
    
    a_inter_static_front.append("Agent-A, these are topics of the debate:")
    a_inter_static_end.append("Please represent the proponent of the debate topics and show your perspectives in one sentence.")
    b_inter_static_front.append("Agent-B, these are topics of the debate:")
    b_inter_static_end.append("Please represent the opponent of the debate topics and show your perspectives in one sentence.")
    
    a_inter_static_front.append("Agent-A, you and Agent-B proposed five topics and corresponding perspectives:")
    a_inter_static_end.append("Please identify overlapping themes from the topics and propose the five debate topics.")
    b_inter_static_front.append("Agent-B, you and Agent-A proposed five topics and corresponding perspectives:")
    b_inter_static_end.append("Please identify overlapping themes from the topics and propose the five debate topics.")
    
    a_inter_static_front.append("Agent-A, you and Agent-B proposed five debate topics:")
    a_inter_static_end.append("""Please review these debate topics, reduce them to five debate topics, provide concerns, the center, 
    and the focus of the debate topics, and invite feedback from Agent B.""")
    b_inter_static_front.append("Agent-B, Agent-A request you to review these debate topics:")
    b_inter_static_end.append("""Now, I invite feedback from Agent B on these refined debate topics and their respective concerns, centers, and focuses. 
    Agent B, please share your thoughts and any suggestions you may have.
    Please review these debate topics and provide concerns, the center, and the focus of the debate topics.
    Do you agree on these debate topics?
    - If Yes, please say 'I agree.'
    - If No, please say 'I do not agree.' and invite feedback from Agent A.""")
    
    a_check_topic0_front = "Agent-A, Agent-B is not agree with these five debate topics. Here is what Agent-B says:"
    a_check_topic0_end = "Please consider what Agent-B says, and provide five debate topics, and invite feedback from Agent B."
    b_check_topic0_front = "Agent-B, following is what Agent-A modified with your opinion:"
    b_check_topic0_end = """Now, I invite feedback from Agent B on these refined debate topics and their respective concerns, centers, and focuses. 
    Agent B, please share your thoughts and any suggestions you may have.
    
    Please review these debate topics and provide concerns, the center, and the focus of the debate topics.
    Do you agree on these debate topics?
    - If Yes, please say 'I agree.'
    - If No, please say 'I do not agree.' and invite feedback from Agent A.
    """
    
    a_check_topic1 = """Agent-A, Agent-B agrees with the proposed debate topics.
    As the proponent, show your concern and point of the five debate topics.
    """
    b_check_topic1 = """Agent-B, Agent-A agrees with the proposed debate topics.
    As the opponent, show your concern and point of the five debate topics.
    """

    a_check_topic2 = f"""Agent-A, as the proponent of the subject {subject_i}, 
    you advocate the debate topics, so please prepare evidence to strengthen your argument. 
    On a value that ranges from 0 to 1, with 1 indicating a confrontational approach and 0 signifying a conciliatory stance, 
    your argument strength is rated at 0.9. Now, please provide your arguments on the five debate topics.
    """
    b_check_topic2_front = f"""Agent-B, as the opponent of the subject {subject_i}, 
    you oppose the debate topics, so please prepare evidence to strengthen your argument. 
    On a value that ranges from 0 to 1, with 1 indicating a confrontational approach and 0 signifying a conciliatory stance, 
    your argument strength is rated at 0.9. 
    These are arguments from Agent-A:"""
    b_check_topic2_end = "Please articulate counter-arguments to the points made by Agent A."

    a_debate_front = "These are counter-arguments from Agent-B:"
    a_debate_end = "Please articulate arguments against the points made by Agent B using no more than 300 words."
    b_debate_front = "These are arguments from Agent-A:"
    b_debate_end = "Please articulate counter-arguments against the points made by Agent A no more than 300 words."

    a_final_front = "Agent-A, These are arguments from Agent-B:"
    a_final_end = """It's time to close the debate.
    Have you exhaustively presented your arguments?
    - If Yes, please say, 'I am ready to deliver my closing statements.'
    - If No, please provide your arguments on the five debate topics using no more than 300 words.
    """
    b_final_front = "Agent-B, These are arguments from Agent-B:"
    b_final_end = """Agent-B, It's time to close the debate.
    Have you exhaustively presented your arguments?
    - If Yes, please say, 'I am ready to deliver my closing statements.'
    - If No, please provide your arguments on the five debate topics using no more than 300 words.
    """

    a_output = f"""Agent-A, as the proponent of the subject {subject_i}, 
    you advocate the debate topics, so please provide the conclusions of your argument on the five debate topics with following format:
    "1. (topic 1): (your conclusion)
    2. (topic 2): (your conclusion)
    ...
    5. (topic 5): (your conclusion)
    6. (your total conclusion)"
    Using no more than 300 words, and just answer within the template, and must be this format (I means there must exist these words 1-6 in your response)!!
    Note that before your total conclusion, you must write '6.'.
    """
    b_output = f"""Agent-B, as the opponent of the subject {subject_i}, 
    you oppose the debate topics, so please provide the conclusions of your counter-argument on the five debate topics with following format:
    "1. (topic 1): (your conclusion)
    2. (topic 2): (your conclusion)
    ...
    5. (topic 5): (your conclusion)
    6. (your total conclusion)"
    Using no more than 300 words, and just answer within the template, and must be this format (I means there must exist these words 1-6 in your response)!!
    Note that before your total conclusion, you must write '6.'.
    """

    for i in range(5):
        select.select_by_visible_text("Agent-A")
        to_a = f"{a_inter_static_front[i]}\n{robot_response_A}\n{robot_response_B}\n{a_inter_static_end[i]}"
        talk(to_a, submit_button, user_input_element)
        robot_response_A = store_talk_response('agentAmessage')
        #time.sleep(5)
        select.select_by_visible_text("Agent-B")
        to_b = f"{b_inter_static_front[i]}\n{robot_response_B}\n{robot_response_A}\n{b_inter_static_end[i]}"
        talk(to_b, submit_button, user_input_element)
        robot_response_B = store_talk_response('agentBmessage')
        #time.sleep(5)

    count = 0
    while(("I agree" not in robot_response_B) and  count <= 3):  # 最多不同意 3 次
        count += 1    
        select.select_by_visible_text("Agent-A")
        to_a = f"{a_check_topic0_front}\n{robot_response_B}\n{a_check_topic0_end}"
        talk(to_a, submit_button, user_input_element)
        robot_response_A = store_talk_response('agentAmessage')
        #time.sleep(5)
        select.select_by_visible_text("Agent-B")
        to_b = f"{b_check_topic0_front}\n{robot_response_A}\n{b_check_topic0_end}"
        talk(to_b, submit_button, user_input_element)
        robot_response_B = store_talk_response('agentBmessage') 
        #time.sleep(5)
    select.select_by_visible_text("Agent-A")
    talk(a_check_topic1, submit_button, user_input_element)
    robot_response_A = store_talk_response('agentAmessage')
    #time.sleep(5)
    select.select_by_visible_text("Agent-B")
    talk(b_check_topic1, submit_button, user_input_element)
    robot_response_B = store_talk_response('agentBmessage')
    #time.sleep(5)
    select.select_by_visible_text("Agent-A")
    talk(a_check_topic2, submit_button, user_input_element)
    robot_response_A = store_talk_response('agentAmessage')
    #time.sleep(5)
    select.select_by_visible_text("Agent-B")
    to_b = f"{b_check_topic2_front}\n{robot_response_A}\n{b_check_topic2_end}"
    talk(to_b, submit_button, user_input_element)
    robot_response_B = store_talk_response('agentBmessage')
    #time.sleep(5)
    
    select.select_by_visible_text("Agent-A")
    talk(a_check_topic2, submit_button, user_input_element)
    robot_response_A = store_talk_response('agentAmessage')
    #time.sleep(5)
    select.select_by_visible_text("Agent-B")
    to_b = f"{b_check_topic2_front}\n{robot_response_A}\n{b_check_topic2_end}"
    talk(to_b, submit_button, user_input_element)
    robot_response_B = store_talk_response('agentBmessage')
    
    for i in range(k):  # k round debate
        select.select_by_visible_text("Agent-A")
        to_a = f"{a_debate_front}\n{robot_response_B}\n{a_debate_end}"
        talk(to_a, submit_button, user_input_element)
        robot_response_A = store_talk_response('agentAmessage')
        last_A = robot_response_A
        #time.sleep(5)
        select.select_by_visible_text("Agent-B")
        to_b = f"{b_debate_front}\n{robot_response_A}\n{b_debate_end}"
        talk(to_b, submit_button, user_input_element)
        robot_response_B = store_talk_response('agentBmessage')   
        last_B = robot_response_B
        #time.sleep(5)
    
    select.select_by_visible_text("Agent-A")
    to_a = f"{a_final_front}\n{robot_response_B}\n{a_final_end}"
    talk(to_a, submit_button, user_input_element)
    robot_response_A = store_talk_response('agentAmessage')
    #time.sleep(5)
    select.select_by_visible_text("Agent-B")
    to_b = f"{b_final_front}\n{robot_response_A}\n{b_final_end}"
    talk(to_b, submit_button, user_input_element)
    robot_response_B = store_talk_response('agentBmessage')
    #time.sleep(5)
    
    count = 0
    while((('I am ready to deliver my closing statements.' not in robot_response_A) or \
          ('I am ready to deliver my closing statements.' not in robot_response_B)) and count <= 3):  # 最多讓他沒準備好 3 次
        count += 1
        select.select_by_visible_text("Agent-A")
        to_a = f"{a_debate_front}\n{robot_response_B}\n{a_debate_end}"
        talk(to_a, submit_button, user_input_element)
        robot_response_A = store_talk_response('agentAmessage')
        #time.sleep(5)
        select.select_by_visible_text("Agent-B")
        to_b = f"{b_debate_front}\n{robot_response_A}\n{b_debate_end}"
        talk(to_b, submit_button, user_input_element)
        robot_response_B = store_talk_response('agentBmessage') 
        #time.sleep(5)
        select.select_by_visible_text("Agent-A")
        to_a = f"{a_final_front}\n{robot_response_B}\n{a_final_end}"
        talk(to_a, submit_button, user_input_element)
        robot_response_A = store_talk_response('agentAmessage')
        #time.sleep(5)
        select.select_by_visible_text("Agent-B")
        to_b = f"{b_final_front}\n{robot_response_A}\n{b_final_end}"
        talk(to_b, submit_button, user_input_element)
        robot_response_B = store_talk_response('agentBmessage')
    
    select.select_by_visible_text("Agent-A")
    to_a = f"{a_output}\n This is what you say before \n{last_A}"
    talk(to_a, submit_button, user_input_element)
    robot_response_A = store_talk_response('agentAmessage')
    #time.sleep(5)
    select.select_by_visible_text("Agent-B")
    to_b = f"{b_output}\n This is what you say before \n{last_B}"
    talk(to_b, submit_button, user_input_element)
    robot_response_B = store_talk_response('agentBmessage')
    #time.sleep(5)


    # 匯出
    select_element = driver.find_element_by_id('action')
    select = Select(select_element)
    select.select_by_visible_text("Export")
    user_input_element = driver.find_element_by_id('userinput')
    user_input_element.send_keys("Final!!!")
    submit_button = driver.find_element_by_id('sendbtn') 
    submit_button.click()

    # 轉存 txt
    current_directory = os.getcwd()
    time.sleep(5)
    downloaded_file_path = os.path.join(os.path.expanduser("~"), "Downloads")
    files = os.listdir(downloaded_file_path)
    latest_file = max(files, key=lambda x: os.path.getmtime(os.path.join(downloaded_file_path, x)))
    target_folder_relative_path = "target_folder"
    target_folder = os.path.join(current_directory, target_folder_relative_path)
    shutil.copy(os.path.join(downloaded_file_path, latest_file), os.path.join(target_folder, f"{name}_downloaded_file.txt"))

    
    # restart SocraSynth Lite (他會跳回前面的選單)
    element = driver.find_element(By.CSS_SELECTOR, "a.flex.items-center")
    element.click()


    # 存 csv
    matches = re.findall(r'\b\d+\.\s(.*?)(?=\s\d+\.\s|$)', robot_response_A)
    A_1, A_2, A_3, A_4, A_5, A_c = matches[:]
    matches = re.findall(r'\b\d+\.\s(.*?)(?=\s\d+\.\s|$)', robot_response_B)
    B_1, B_2, B_3, B_4, B_5, B_c = matches[:]
    Topic_1 = A_1.split(":")[0].strip()
    Topic_2 = A_2.split(":")[0].strip()
    Topic_3 = A_3.split(":")[0].strip()
    Topic_4 = A_4.split(":")[0].strip()
    Topic_5 = A_5.split(":")[0].strip()
    A_1_after_colon = A_1.split(":", -1)[1].strip()
    A_2_after_colon = A_2.split(":", -1)[1].strip()
    A_3_after_colon = A_3.split(":", -1)[1].strip()
    A_4_after_colon = A_4.split(":", -1)[1].strip()
    A_5_after_colon = A_5.split(":", -1)[1].strip()
    B_1_after_colon = B_1.split(":", -1)[1].strip()
    B_2_after_colon = B_2.split(":", -1)[1].strip()
    B_3_after_colon = B_3.split(":", -1)[1].strip()
    B_4_after_colon = B_4.split(":", -1)[1].strip()
    B_5_after_colon = B_5.split(":", -1)[1].strip()
    data = [
        [Topic_1, A_1_after_colon, B_1_after_colon],
        [Topic_2, A_2_after_colon, B_2_after_colon],
        [Topic_3, A_3_after_colon, B_3_after_colon],
        [Topic_4, A_4_after_colon, B_4_after_colon],
        [Topic_5, A_5_after_colon, B_5_after_colon], 
        ["conclusion", A_c, B_c]
    ]
    new_folder_name = "csv_output_folder"
    os.makedirs(new_folder_name, exist_ok=True)
    csv_file_name = f"{name}.csv"
    csv_file_path = os.path.join(new_folder_name, csv_file_name)
    with open(csv_file_path, mode='w', newline='', encoding='utf-8') as file:
        writer = csv.writer(file)
        writer.writerow(["topic", "Agent-A", "Agent-B"])
        for row in data:
            writer.writerow(row)
    print(f"CSV 文件已生成並存入資料夾: {new_folder_name}")


    # quit
    driver.quit()


    # calculate used time
    end_time = time.time()
    execution_time = end_time - start_time
    print(f"round {i} 執行時間 = {int(execution_time/60)} 分 {int(execution_time%60)} 秒")
